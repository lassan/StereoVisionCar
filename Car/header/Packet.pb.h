// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef PROTOBUF_Packet_2eproto__INCLUDED
#define PROTOBUF_Packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packet_2eproto();
void protobuf_AssignDesc_Packet_2eproto();
void protobuf_ShutdownFile_Packet_2eproto();

class Packet;

// ===================================================================

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 driving = 1;
  inline bool has_driving() const;
  inline void clear_driving();
  static const int kDrivingFieldNumber = 1;
  inline ::google::protobuf::int32 driving() const;
  inline void set_driving(::google::protobuf::int32 value);

  // optional string frames = 2;
  inline bool has_frames() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 2;
  inline const ::std::string& frames() const;
  inline void set_frames(const ::std::string& value);
  inline void set_frames(const char* value);
  inline void set_frames(const char* value, size_t size);
  inline ::std::string* mutable_frames();
  inline ::std::string* release_frames();
  inline void set_allocated_frames(::std::string* frames);

  // optional double speed = 3;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 3;
  inline double speed() const;
  inline void set_speed(double value);

  // @@protoc_insertion_point(class_scope:tutorial.Packet)
 private:
  inline void set_has_driving();
  inline void clear_has_driving();
  inline void set_has_frames();
  inline void clear_has_frames();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* frames_;
  double speed_;
  ::google::protobuf::int32 driving_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// ===================================================================


// ===================================================================

// Packet

// optional int32 driving = 1;
inline bool Packet::has_driving() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_driving() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_driving() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_driving() {
  driving_ = 0;
  clear_has_driving();
}
inline ::google::protobuf::int32 Packet::driving() const {
  return driving_;
}
inline void Packet::set_driving(::google::protobuf::int32 value) {
  set_has_driving();
  driving_ = value;
}

// optional string frames = 2;
inline bool Packet::has_frames() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_frames() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_frames() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_frames() {
  if (frames_ != &::google::protobuf::internal::kEmptyString) {
    frames_->clear();
  }
  clear_has_frames();
}
inline const ::std::string& Packet::frames() const {
  return *frames_;
}
inline void Packet::set_frames(const ::std::string& value) {
  set_has_frames();
  if (frames_ == &::google::protobuf::internal::kEmptyString) {
    frames_ = new ::std::string;
  }
  frames_->assign(value);
}
inline void Packet::set_frames(const char* value) {
  set_has_frames();
  if (frames_ == &::google::protobuf::internal::kEmptyString) {
    frames_ = new ::std::string;
  }
  frames_->assign(value);
}
inline void Packet::set_frames(const char* value, size_t size) {
  set_has_frames();
  if (frames_ == &::google::protobuf::internal::kEmptyString) {
    frames_ = new ::std::string;
  }
  frames_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet::mutable_frames() {
  set_has_frames();
  if (frames_ == &::google::protobuf::internal::kEmptyString) {
    frames_ = new ::std::string;
  }
  return frames_;
}
inline ::std::string* Packet::release_frames() {
  clear_has_frames();
  if (frames_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frames_;
    frames_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet::set_allocated_frames(::std::string* frames) {
  if (frames_ != &::google::protobuf::internal::kEmptyString) {
    delete frames_;
  }
  if (frames) {
    set_has_frames();
    frames_ = frames;
  } else {
    clear_has_frames();
    frames_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double speed = 3;
inline bool Packet::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double Packet::speed() const {
  return speed_;
}
inline void Packet::set_speed(double value) {
  set_has_speed();
  speed_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packet_2eproto__INCLUDED
